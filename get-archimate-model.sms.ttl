# baseURI: http://metromap.politie.org/importer_archimate
# imports: http://metro.politie.nl
# imports: http://topbraid.org/sparqlmotionfunctions
# imports: http://topbraid.org/sparqlmotionlib-tb
# prefix: importer

@prefix importer: <http://metromap.politie.org/importer_archimate#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://metromap.politie.org/importer_archimate>
  a owl:Ontology ;
  owl:imports <http://metro.politie.nl> ;
  owl:imports <http://topbraid.org/sparqlmotionfunctions> ;
  owl:imports <http://topbraid.org/sparqlmotionlib-tb> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
importer:Ask_1
  a sp:Ask ;
  rdfs:label "Ask 1" ;
.
importer:BindBySelect_1
  a sml:BindBySelect ;
  sm:nodeX 1028 ;
  sm:nodeY 654 ;
  sml:selectQuery [
      a sp:Select ;
      sp:limit "1"^^xsd:long ;
      sp:resultVariables (
          [
            sp:varName "xml" ;
          ]
        ) ;
      sp:where (
          [
            sp:object <http://metro.politie.nl#source> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "model" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "s" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "xml" ;
              ] ;
            sp:predicate <http://metro.politie.nl#archimate> ;
            sp:subject [
                sp:varName "s" ;
              ] ;
          ]
        ) ;
    ] ;
.
importer:BindLiteralVariable_1
  a sml:BindLiteralVariable ;
  sm:next importer:importXMLFromUrl_Return ;
  sm:nodeX 1590 ;
  sm:nodeY 677 ;
  sm:outputVariable "doc" ;
  sml:datatype xsd:string ;
  sml:template "{?xml}" ;
.
importer:BranchByAsk_1
  a sml:BranchByAsk ;
  sm:else importer:ImportXMLFromURL_1 ;
  sm:if importer:BindBySelect_1 ;
  sm:next importer:BindLiteralVariable_1 ;
  sm:nodeX 1037 ;
  sm:nodeY 305 ;
  sml:askQuery [
      a sp:Ask ;
      sp:where (
          [
            sp:object <http://metro.politie.nl#source> ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "i" ;
              ] ;
          ]
          [
            a sp:Filter ;
            sp:expression [
                a sp:isURI ;
                sp:arg1 [
                    sp:varName "i" ;
                  ] ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:label "if not source instance" ;
.
importer:ImportRDFFromWorkspace_1
  a sml:ImportRDFFromWorkspace ;
  sm:next importer:BranchByAsk_1 ;
  sm:nodeX 459 ;
  sm:nodeY 448 ;
  sml:baseURI [
      a sp:concat ;
      sp:arg1 "urn:x-evn-master:" ;
      sp:arg2 [
          sp:varName "ontology" ;
        ] ;
    ] ;
  sml:ignoreImports false ;
.
importer:ImportXMLFromURL_1
  a sml:ImportXMLFromURL ;
  sm:nodeX 1434 ;
  sm:nodeY 282 ;
  sm:outputVariable "xml" ;
  sml:ignoreDoctype false ;
  sml:url "{?url}" ;
  rdfs:label "Import XMLFrom URL 1" ;
.
importer:Select_1
  a sp:Select ;
.
importer:importXMLFromUrl
  a sm:Function ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue "https://gist.githubusercontent.com/btotr/4268e3c034ef0423dadb9e79655acaad/raw/1db97a8db3fea44420561d81ab71382e04999f83/archimate-example" ;
      spl:optional true ;
      spl:predicate <http://spinrdf.org/arg#url> ;
      spl:valueType xsd:string ;
      sm:next importer:BranchByAsk_1 ;
      sm:nodeX 511 ;
      sm:nodeY 842 ;
      sml:hidden true ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue "metromap_source" ;
      spl:optional true ;
      spl:predicate <http://spinrdf.org/arg#ontology> ;
      spl:valueType xsd:string ;
      sm:next importer:ImportRDFFromWorkspace_1 ;
      sm:nodeX 201 ;
      sm:nodeY 640 ;
      sml:hidden true ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue "model1" ;
      spl:optional true ;
      spl:predicate <http://spinrdf.org/arg#model> ;
      spl:valueType xsd:string ;
      sm:next importer:BindBySelect_1 ;
      sm:nodeX 1054 ;
      sm:nodeY 908 ;
      sml:hidden true ;
    ] ;
  sm:returnModule importer:importXMLFromUrl_Return ;
  rdfs:subClassOf sm:Functions ;
.
importer:importXMLFromUrl_1
  a importer:importXMLFromUrl ;
  sm:nodeX 203 ;
  sm:nodeY 639 ;
  sm:outputVariable "result" ;
  rdfs:label "import XMLFrom url 1" ;
.
importer:importXMLFromUrl_Return
  a sml:ReturnNode ;
  sml:result [
      sp:varName "doc" ;
    ] ;
.
